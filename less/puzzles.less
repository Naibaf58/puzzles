/*! Puzzles-html stylesheet
 */

@import url(http://fonts.googleapis.com/css?family=Bitter:700);

@import "variables.less";

@bodyBackground:        #FDF5E6; // old lace;
@textColor:             #472B17;
@headingsColor:         #643310;
@linkColor:             #173959;
@linkColorHover:        @linkColor;

// Gameboard background color:
//
// Some games will insist on darkening the background color to ensure
// sufficient contrast with white (and/or their highlight colors), if
// background lightness is less than 1.0/1.1. (See game_mkhighlight
// in puzzles/misc.c.)
//
// And we want to use a relatively light page background color, because
// we dislike low-contrast sites. But we want the color scheme to match
// throughout the page.
//
// So we choose our own game background color here, making sure it
// satisfies all these criteria.
//
// Also, some games really need clear delineation of the active playing
// area (e.g., untangle) or have background color that bleeds into
// the surrounding page (blackbox, bridges, magnets, pegs, sixteen,
// unequal). So we draw a well around the gameboard, matching the game's
// background color, to get a visible border.
//
// (It would actually look quite a bit cleaner without the well, for
// games that don't need a border and don't bleed background. Should
// explore doing some game-specific CSS at some point.)

@gameBackground:        hsl(hue(@bodyBackground), saturation(@bodyBackground)*0.8, 1.0/1.1);
                        // match hue
                        // desaturate slightly, or it gets garish
                        // lightness should really be min(1.0/1.1, lightness(@bodyBackground))

@wellBackground:        @gameBackground;

@grayLight:             mix(@wellBackground, @headingsColor); // muted text
@grayLighter:           darken(@wellBackground, 7%); // hairlines -- matches well border

@headingsFontFamily:    'Bitter', serif;

@import "bootstrap.less";


// Responsive breakpoints (wide, regular, narrow are matched to Bootstrap)

// Wide: Bootstrap "large desktops"
@responsiveWideMin:    1200px;

// Regular: Bootstrap default styles ("regular desktops")
@responsiveRegularMax: (@responsiveWideMin - 1px);
@responsiveRegularMin: 980px;

// Narrow: Bootstrap "tablets to regular desktops"
@responsiveNarrowMax:  (@responsiveRegularMin - 1px);
@responsiveNarrowMin:  768px;

// Small: phones in landscape orientation
@responsiveSmallMax:   (@responsiveNarrowMin - 1px);
@responsiveSmallMin:   481px;

// Tiny: phones in portrait orientation
@responsiveTinyMax:    (@responsiveSmallMin - 1px);



// Additional reset:

menu {
    padding: 0;
    margin: 0;
}

template {
    display: none;
}

// Style basic (semantic) elements:

button {
    .btn;
}

noscript {
    display: block;
    white-space: pre-line;
    .alert;
    .alert-block;
    .alert-error;
}


//
// Page Layout
//

.app {
    position: relative;
}

section {
    margin: @baseLineHeight 0;
}

.game {
    margin: (@baseLineHeight * 1.5) 0;
}

//
// Header
//

header {
    .page-header;

    h1 {
        display: inline-block;
        margin: 0 0.25em 0 0; // right margin for inline subtitle
    }

    .subtitle {
        display: inline-block;
        .muted;
    }
}

//
// Game
//

.app, .game, .help {
    // Minimize load-time flashing
    visibility: hidden;
}


.game {
    .well;
    display: inline-block; // shrink well horizontally to hug contents
}

#status {
    // Roughly an h4 in the regular body font
    margin-bottom: 19px; // matches .well padding
    font-size: (@baseFontSize * 1.25);
    font-weight: bold;
    line-height: @baseLineHeight;
    color: @headingsColor;
    text-rendering: optimizelegibility; // Fix the character spacing for headings
    min-height: @baseLineHeight; // else it shrinks when empty, causing lots of jumping
}

#gameboard {
    display: block;
    background-color: @gameBackground;
    cursor: default;
    font-weight: bold;

    min-width: 200px;
    min-height: 200px;
}

.control select {
    width: 10em;
    margin-bottom: 0;
}

menu {
    @groupSpacing: 5px;

    margin: (-@groupSpacing);

    .buttongroup {
        display: inline-block;
        margin: @groupSpacing;
    }
}

.keyboard {
    button {
        .btn-large;
    }
}

//
// Responsive Game Layout
//

@media (max-width: @responsiveSmallMax) {
    .game {
        .well-small;
    }
    #status {
        margin-bottom: 9px; // matches .well-small padding
    }
}

@media (max-width: @responsiveTinyMax) {
    body {
        padding-left: 5px;
        padding-right: 5px;
    }
    header, section {
        margin: 5px 0;
    }
    .game {
        margin: 10px 0;
    }
    #status {
        font-size: @baseFontSize;
        margin-bottom: 5px;
    }
    header {
        padding-bottom: 4px;
        h1 {
            display: block; // because inline-block was wrapping on Android
        }
        .subtitle {
            display: none;
        }
    }
    h1 {
        font-size: @baseFontSize * 1.5;
        line-height: @baseLineHeight * 1.5;
    }
    button, .keyboard button, select {
        .btn-small;
    }
    select {
        height: (@baseLineHeight + 2*(2px + 1px)); // @paddingSmall vertical + border
    }
    menu { // should make this a mixin
        @groupSpacing: 2px;

        margin: (-@groupSpacing);
        .buttongroup {
            display: inline-block;
            margin: @groupSpacing;
        }
    }
}


//
// Messages
//

.message-backdrop {
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    z-index: @zindexModalBackdrop;

    // background-color: rgba(0, 0, 0, 0.10);

    display: none;
}

.message {
    .alert;
    .alert-block;

    display: none; // will be inline-block when shown
    position: relative;
    top: 30%;
    left: 10%;
    z-index: @zindexModal;

    &.alert-info { .alert-info; }
    &.alert-success { .alert-success; }
    &.alert-danger { .alert-danger; }

    h4 {
        margin-top: 0;
        margin-right: 5px;
    }

    .close {
        position: absolute;
        top: 5px;
        right: 10px;
    }
}

//
// Index Page
//

body.index {
    @thumbSize: 75px;
    @tilePadding: (@gridGutterWidth/2);

    ul {
        margin: 0 (-@tilePadding);
        list-style: none;
        .clearfix();
    }
    li {
        display: inline-block;
        vertical-align: top;
        width: 24.75%; // Regular layout; see responsive overrides below
        margin: (@baseLineHeight/2) -1px;

        > a {
            display: block;
            position: relative;

            min-height: @thumbSize; // in case description short
            line-height: @baseLineHeight;
            padding: @tilePadding @tilePadding @tilePadding (@tilePadding + @thumbSize + @tilePadding);

            border: 1px solid transparent;
            .border-radius(@baseBorderRadius);

            h3, h4 {
                margin-top: 0;
            }
            p {
                margin: 10px 0 0;
            }

            // Entire LI contents are wrapped in an A; make the LI behave like the A
            color: inherit;
            &:hover {
                text-decoration: inherit;
                border-color: @grayLight;
                h3, h4 {
                    color: @linkColorHover;
                    text-decoration: underline;
                }
            }
        }

        // Thumbnail images
        img {
            display: block;
            max-width: @thumbSize;
            position: absolute;
            top: @tilePadding;
            left: @tilePadding;
        }
    }

    // Responsive index layouts (regular = 4-up, above)
    @media (min-width: @responsiveWideMin) {
        li { width: 19.75%; } // wide = 5-up
    }
    @media (min-width: @responsiveNarrowMin) and (max-width: @responsiveNarrowMax) {
        li { width: 33%; } // narrow = 3-up
    }
    @media (min-width: @responsiveSmallMin) and (max-width: @responsiveSmallMax) {
        li { width: 49.5%; } // small = 2-up
    }
    @media (max-width: @responsiveTinyMax) {
        li { width: 100%; } // tiny = 1-up
    }
}



//
// DEBUGGING STUFF
//

#debug {
    display: none;
    margin: (2 * @baseLineHeight) 0 0;
    padding-top: ((@baseLineHeight / 2) - 1);
    border-top: 1px solid @grayLight;

    white-space: pre-wrap;
    margin-top: @baseLineHeight;

    .meter {
        display: inline-block;
        position: relative;
        width: 250px;
        height: @baseLineHeight;
        background-color: @grayLighter;
        vertical-align: bottom;

        .current, .peak {
            display: block;
            position: absolute;
            left: 0;
            top: 0;
            height: @baseLineHeight;
        }
        .current {
            background-color: @successBorder;
        }
        .peak {
            left: -1px;
            background-color: transparent;
            border-right: 2px solid @errorText;
        }
        .max-label {
            position: absolute;
            right: 0;
            top: 0;
        }
        .peak-label {
            position: absolute;
            left: 0;
            top: 0;
        }
    }
}

